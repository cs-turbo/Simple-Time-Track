// Generated by CoffeeScript 1.8.0

/*
Tasks data provider
 */

(function() {
  var Tasks,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  onError(tx, error)(function() {
    return alert(error.message);
  });

  Tasks = (function() {
    Tasks.$inject = ['$scope'];

    function Tasks($scope) {
      this.$scope = $scope;
      this.deleteAll = __bind(this.deleteAll, this);
      this.removeAll = __bind(this.removeAll, this);
      this.remove = __bind(this.remove, this);
      this.insert = __bind(this.insert, this);
      this.$scope.db = openDatabase('timetrack', '', 'Time track database', 2 * 1024 * 1024);
      this.$scope.db.changeVersion('', '2.0', function(tx) {
        return tx.executeSql('CREATE TABLE IF NOT EXISTS tasks(ID INTEGER PRIMARY KEY ASC, project_name TEXT, name TEXT, time INTEGER, start DATETIME, running BOOLEAN)', [], null, onError);
      });
      if (this.$scope.dsb.version === '1.0' || this.$scope.dsb.version === '1.1') {
        this.$scope.db.changeVersion(this.$scope.db.version, '2.0', function(tx) {
          return tx.executeSql('ALTER TABLE tasks ADD project_name TEXT AFTER ID');
        });
      }
    }

    Tasks.prototype.insert = function(id, project_name, name) {
      return this.$scope.db.transaction(function(tx) {
        return tx.executeSql('INSERT INTO tasks (id, project_name, name, time, start, running) VALUES (?, ?, ?, ?, ?, ?)', [id, project_name, name, 0, new Date, false], (function(tx, result) {
          taskInterface.index();
        }), onError);
      });
    };

    Tasks.prototype.remove = function(id) {
      db.transaction(function(tx) {
        tx.executeSql('DELETE FROM tasks WHERE id=?', [id], (function(tx, result) {
          window.clearInterval(taskInterface.intervals[id]);
          taskInterface.index();
        }), onError);
      });
    };

    Tasks.prototype.removeAll = function() {
      return db.transaction(function(tx) {
        return tx.executeSql('DELETE FROM tasks', [], (function(tx, results) {
          var iid;
          for (iid in taskInterface.intervals) {
            iid = iid;
            window.clearInterval(taskInterface.intervals[iid]);
          }
          taskInterface.index();
        }), onError);
      });
    };

    Tasks.prototype.deleteAll = function() {
      return db.transaction(function(tx) {
        return tx.executeSql('DROP TABLE tasks', [], (function(tx, results) {
          alert('Table tasks was droped');
        }), onError);
      });
    };

    return Tasks;

  })();


  /*
    Register services
   */

  app.service('Tasks', Tasks);

}).call(this);
